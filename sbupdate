#!/bin/bash
#
# sbupdate -- Generate and sign kernel images for UEFI Secure Boot on Arch Linux
# Copyright (C) 2016 Andrey Vihrov <andrey.vihrov@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu

# Configuration

KEY_DIR="/root/secure-boot"
ESP_DIR="/boot"
OUTPUT_DIR="${ESP_DIR}/EFI/Arch"
SPLASH="/usr/share/systemd/bootctl/splash-arch.bmp"
EXTRA_SIGN=()
source "/etc/default/sbupdate"


# Global variables

case "$(uname -m)" in
  x86_64)
    EFISTUB="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
    ;;
  i686)
    EFISTUB="/usr/lib/systemd/boot/efi/linuxia32.efi.stub"
    ;;
  *)
    echo "$0: unsupported architecture: $(uname -m)" >&2
    exit 1
    ;;
esac

INITRD_PREPEND=()
[ -f "/boot/intel-ucode.img" ] && INITRD_PREPEND+=('/boot/intel-ucode.img')

INITRD_TMP="$(mktemp)"
CMDLINE_TMP="$(mktemp)"
trap "rm -f '${INITRD_TMP}' '${CMDLINE_TMP}'" EXIT


# Main loop

if [ "${#KERNEL[@]}" -eq 0 ]; then
  echo "$0: error: no kernels specified" >&2
  exit 1
fi
if [ -z "${CMDLINE_DEFAULT+x}" ]; then
  echo "$0: error: CMDLINE_DEFAULT is not defined. Set it in the configuration file." >&2
  exit 1
fi

mkdir -p "${OUTPUT_DIR}"
for k in "${!KERNEL[@]}"; do
  kernel="${KERNEL[$k]}"
  image="/boot/vmlinuz-${kernel}"
  cmdline="${CMDLINE[$k]:-${CMDLINE_DEFAULT}}"
  initrd="${INITRD[$k]:-/boot/initramfs-${kernel}.img}"
  output="${OUTPUT_DIR}/${kernel}-signed.efi"

  echo "Generating and signing kernel image for ${kernel}..."
  
  # Create cmdline file
  echo "${cmdline}" > ${CMDLINE_TMP}

  # Join all initramfs files. Refer to:
  #   https://www.kernel.org/doc/Documentation/x86/early-microcode.txt
  cat "${INITRD_PREPEND[@]}" "${initrd}" > "${INITRD_TMP}"

  # Create a combined binary with systemd EFI stub. For additional information see:
  #   https://github.com/systemd/systemd/blob/master/src/boot/efi/stub.c
  #   https://github.com/systemd/systemd/blob/master/test/test-efi-create-disk.sh
  objcopy \
    --add-section .osrel="/etc/os-release"  --change-section-vma .osrel=0x20000    \
    --add-section .cmdline="${CMDLINE_TMP}" --change-section-vma .cmdline=0x30000  \
    --add-section .splash="${SPLASH}"       --change-section-vma .splash=0x40000   \
    --add-section .linux="${image}"         --change-section-vma .linux=0x2000000  \
    --add-section .initrd="${INITRD_TMP}"   --change-section-vma .initrd=0x3000000 \
    "${EFISTUB}" "${output}"

  # Sign the resulting output file
  sbsign --key "${KEY_DIR}/DB.key" --cert "${KEY_DIR}/DB.crt" --output "${output}" "${output}"
done


# Also sign user-specified extra files

for file in "${EXTRA_SIGN[@]}"; do
  if sbverify --cert "${KEY_DIR}/DB.crt" "${file}" >/dev/null 2>&1; then
    echo "Skipping already signed file ${file}"
  else
    echo "Signing ${file}..."
    sbsign --key "${KEY_DIR}/DB.key" --cert "${KEY_DIR}/DB.crt" --output "${file}" "${file}"
  fi
done

# vim:set ts=2 sw=2 et:
