#!/bin/bash
#
# sbupdate -- Generate and sign kernel images for UEFI Secure Boot on Arch Linux
# Copyright (C) 2016 Andrey Vihrov <andrey.vihrov@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu

# Load configuration
function load_config() {
  KEY_DIR="/root/secure-boot"
  ESP_DIR="/boot"
  OUT_DIR="EFI/Arch"
  SPLASH="/usr/share/systemd/bootctl/splash-arch.bmp"
  EXTRA_SIGN=()
  declare -g -A CMDLINE INITRD
  source "/etc/default/sbupdate"

  if [ -z "${CMDLINE_DEFAULT+x}" ]; then
    echo "$0: error: CMDLINE_DEFAULT is not defined. Set it in the configuration file." >&2
    return 1
  fi

  readonly KEY_DIR ESP_DIR OUT_DIR SPLASH EXTRA_SIGN CMDLINE_DEFAULT
  readonly -A CMDLINE INITRD
}

# Find the location of the systemd EFI stub
function find_efi_stub() {
  case "$(uname -m)" in
    x86_64)
      readonly EFISTUB="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
      ;;
    i686)
      readonly EFISTUB="/usr/lib/systemd/boot/efi/linuxia32.efi.stub"
      ;;
    *)
      echo "$0: error: unsupported architecture: $(uname -m)" >&2
      return 1
      ;;
  esac
}

# Check if we need to prepend anything to the initramfs file
function setup_initrd_prepend() {
  INITRD_PREPEND=()
  [ -f "/boot/intel-ucode.img" ] && INITRD_PREPEND+=('/boot/intel-ucode.img')
  readonly -a INITRD_PREPEND
}

# Return output file path corresponding to a kernel
#   $1: kernel name
function output_name() {
  echo "${ESP_DIR}/${OUT_DIR}/$1-signed.efi"
}

# Remove signed images corresponding to a kernel
#   $1: kernel name
function remove_kernel() {
  local output="$(output_name "$1")"

  echo "Removing kernel image for $1..."
  rm -f "${output}" "${output}.bak"
}

# Create a list of kernels to process
function get_kernels() {
  local all_kernels=(/boot/vmlinuz-*); all_kernels=("${all_kernels[@]#/boot/vmlinuz-}")
  local force_all=0
  local name
  KERNELS=()

  if (( HOOK )); then
    # The script was run from the hook. Read standard input to determine
    # which kernels we need to update.
    while read target; do
      case "${target}" in
        boot/vmlinuz-*)
          # Regular kernel
          name="${target#boot/vmlinuz-}"
          if [ ! -f "/${target}" ]; then
            # We are removing this kernel
            remove_kernel "${name}"
          else
            KERNELS+=("${name}")
          fi
          ;;
        *)
          # Another dependency; update all kernels
          force_all=1
          ;;
      esac
    done
  else
    # The script was run by the user
    force_all=1
  fi

  if (( force_all )); then
    KERNELS=("${all_kernels[@]}")
  fi
  readonly -a KERNELS
}

# Generate a signed kernel image
#   $1: kernel name
function update_kernel() {
  local image="/boot/vmlinuz-$1"
  local cmdline="${CMDLINE[$1]:-${CMDLINE_DEFAULT}}"
  local initrd="${INITRD[$1]:-/boot/initramfs-$1.img}"
  local output="$(output_name "$1")"

  echo "Generating and signing kernel image for $1..."

  # Back up existing file if present
  if [ -f "${output}" ]; then
    mv "${output}" "${output}.bak"
  fi
  
  # Create cmdline file
  echo "${cmdline}" > "${CMDLINE_TMP}"

  # Join all initramfs files. Refer to:
  #   https://www.kernel.org/doc/Documentation/x86/early-microcode.txt
  cat ${INITRD_PREPEND:+"${INITRD_PREPEND[@]}"} "${initrd}" > "${INITRD_TMP}"

  # Create a combined binary with systemd EFI stub. For additional information see:
  #   https://github.com/systemd/systemd/blob/master/src/boot/efi/stub.c
  #   https://github.com/systemd/systemd/blob/master/test/test-efi-create-disk.sh
  objcopy \
    --add-section .osrel="/etc/os-release"  --change-section-vma .osrel=0x20000    \
    --add-section .cmdline="${CMDLINE_TMP}" --change-section-vma .cmdline=0x30000  \
    --add-section .splash="${SPLASH}"       --change-section-vma .splash=0x40000   \
    --add-section .linux="${image}"         --change-section-vma .linux=0x2000000  \
    --add-section .initrd="${INITRD_TMP}"   --change-section-vma .initrd=0x3000000 \
    "${EFISTUB}" "${output}"

  # Sign the resulting output file
  sbsign --key "${KEY_DIR}/DB.key" --cert "${KEY_DIR}/DB.crt" --output "${output}" "${output}"
}

# Sign a user-specified extra file
#   $1: file path
function sign_extra_file() {
  if sbverify --cert "${KEY_DIR}/DB.crt" "$1" >/dev/null 2>&1; then
    echo "Skipping already signed file $1"
  else
    echo "Signing $1..."
    sbsign --key "${KEY_DIR}/DB.key" --cert "${KEY_DIR}/DB.crt" --output "$1" "$1"
  fi
}

# Entry point
function main() {
  load_config

  HOOK=0
  if [ "$#" -eq 1 ] && [ "$1" = "--hook" ] ; then
    HOOK=1
  fi

  find_efi_stub
  setup_initrd_prepend
  get_kernels

  # Create temporary files for update_kernel()
  local INITRD_TMP="$(mktemp)" CMDLINE_TMP="$(mktemp)"
  trap "rm -f '${INITRD_TMP}' '${CMDLINE_TMP}'" EXIT

  mkdir -p "${ESP_DIR}/${OUT_DIR}"
  for k in ${KERNELS+"${KERNELS[@]}"}; do
    update_kernel "$k"
  done

  for f in ${EXTRA_SIGN:+"${EXTRA_SIGN[@]}"}; do
    sign_extra_file "$f"
  done
}

main "$@"

# vim:set ts=2 sw=2 et:
